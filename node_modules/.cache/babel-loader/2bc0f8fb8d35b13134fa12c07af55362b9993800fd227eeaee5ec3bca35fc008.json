{"ast":null,"code":"var _jsxFileName = \"D:\\\\Home\\\\Minor-Project-main\\\\Minor-Project-main\\\\front-end\\\\src\\\\Components\\\\UCDP.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Table } from 'react-bootstrap';\nimport './tableDesign.css';\nimport './btn&select.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst UCDP = () => {\n  _s();\n  const [total, setTotal] = useState(0);\n  const [inputval, setInputval] = useState([]);\n  const [load, setLoad] = useState(0);\n  const [mainans, setMainans] = useState([]);\n  const [istrue, setIstrue] = useState(true);\n  const [answer, setAnswer] = useState(0);\n  const solver = async () => {\n    const rows = total;\n    const col = parseInt(load) + 1;\n    const newGrid = new Array(rows);\n    for (let i = 0; i < rows; i++) {\n      newGrid[i] = Array(inputval[i][1]).fill(0);\n    }\n    const newGrid1 = new Array(rows);\n    const newGrid2 = new Array(rows);\n    for (let i = 0; i < rows; i++) {\n      newGrid1[i] = new Array(inputval[i][1]);\n      newGrid2[i] = new Array(inputval[i][1]);\n      for (let j = 0; j <= inputval[i][1]; j++) {\n        newGrid1[i][j] = new Array(3);\n        newGrid2[i][j] = new Array(3);\n        for (let k = 0; k < 3; k++) {\n          newGrid1[i][j][k] = 0;\n          newGrid2[i][j][k] = 0;\n        }\n      }\n    }\n    var totalsum = 0;\n    for (let i = 0; i < rows; i++) {\n      totalsum += inputval[i][1];\n    }\n    if (totalsum < parseInt(load)) {\n      alert(\"Please enter load within limit of combination of generator output\");\n      return;\n    }\n    for (let i = 0; i < rows; i++) {\n      for (let j = 1; j <= inputval[i][1]; j++) {\n        newGrid[i][j] = 1 / 2 * parseFloat(inputval[i][2]) * Math.pow(j, 2) + parseFloat(inputval[i][3]) * j + parseFloat(inputval[i][4]);\n      }\n    }\n    let numrows = inputval[0][1] + 1;\n    for (let i = 1; i < rows; i++) {\n      numrows += inputval[i][1];\n      newGrid2[i] = Array(numrows).fill([Number.MAX_SAFE_INTEGER / 10000000, 0, 0]);\n    }\n    for (let i = 0; i < newGrid[0].length; i++) {\n      newGrid1[0][i][0] = newGrid[0][i];\n      newGrid1[0][i][1] = i;\n      newGrid1[0][i][2] = -1;\n      newGrid2[0][i][0] = newGrid[0][i];\n      newGrid2[0][i][1] = i;\n      newGrid2[0][i][2] = -1;\n    }\n    let flag = true;\n    for (let i = 0; i < rows; i++) {\n      if (inputval[i][1] < load) {\n        flag = false;\n      }\n    }\n    let ans1 = Number.MAX_SAFE_INTEGER;\n    const arraytesting = newGrid2.map(row => row.map(col => col.map(value => value)));\n    if (flag) {\n      for (let i = 1; i < rows; i++) {\n        for (let j = 0; j <= inputval[i][1]; j++) {\n          if (j === 0) {\n            newGrid1[i][0][0] = newGrid[i][0];\n            continue;\n          }\n          let curr = Number.MAX_VALUE;\n          let index1 = 0;\n          let index2 = 0;\n          for (let k = 0; k <= j; k++) {\n            if (curr > newGrid1[i - 1][j - k][0] + newGrid[i][k]) {\n              index1 = k;\n              index2 = j - k;\n            }\n            curr = Math.min(curr, newGrid1[i - 1][j - k][0] + newGrid[i][k]);\n            if (j === col - 1) {\n              ans1 = Math.min(ans1, curr).toFixed(4);\n            }\n          }\n          newGrid1[i][j][0] = curr;\n          newGrid1[i][j][1] = index1;\n          newGrid1[i][j][2] = index2;\n        }\n      }\n    } else {\n      let prevcols = newGrid2[0].length;\n      for (let i = 1; i < rows; i++) {\n        let currcols = newGrid[i].length - 1;\n        for (let j = 0; j <= currcols; j++) {\n          for (let k = 0; k < prevcols; k++) {\n            if (arraytesting[i][j + k][0] > newGrid[i][j] + arraytesting[i - 1][k][0]) {\n              arraytesting[i][j + k][0] = newGrid[i][j] + arraytesting[i - 1][k][0];\n              arraytesting[i][j + k][1] = j;\n              arraytesting[i][j + k][2] = k;\n            }\n          }\n        }\n        prevcols = newGrid2[i].length;\n      }\n    }\n    if (!flag) {\n      let arrayans = [];\n      let j = parseInt(load);\n      let i = rows - 1;\n      while (i > 0 && j > 0) {\n        if (arraytesting[i][j][1] === 0) {\n          i--;\n        } else {\n          arrayans.push([i + 1, arraytesting[i][j][1], (1 / 2 * parseFloat(inputval[i][2]) * Math.pow(arraytesting[i][j][1], 2) + parseFloat(inputval[i][3]) * arraytesting[i][j][1] + parseFloat(inputval[i][4])).toFixed(4)]);\n          j = arraytesting[i][j][2];\n          i--;\n        }\n      }\n      if (i === 0 && j !== 0) {\n        arrayans.push([i + 1, arraytesting[i][j][1], (1 / 2 * parseFloat(inputval[i][2]) * Math.pow(arraytesting[i][j][1], 2) + parseFloat(inputval[i][3]) * arraytesting[i][j][1] + parseFloat(inputval[i][4])).toFixed(4)]);\n      }\n      arrayans.sort((a, b) => a[0] - b[0]);\n      setMainans(arrayans);\n      var answer1 = 0;\n      for (let i = 0; i < arrayans.length; i++) {\n        var v1 = parseFloat(arrayans[i][2]);\n        answer1 += v1;\n      }\n      setAnswer(answer1.toFixed(4));\n    } else {\n      let arrayans = [];\n      let j = parseInt(load);\n      let i = rows - 1;\n      while (i > 0 && j > 0) {\n        if (newGrid1[i][j][1] === 0) {\n          i--;\n        } else {\n          arrayans.push([i + 1, newGrid1[i][j][1], (1 / 2 * parseFloat(inputval[i][2]) * Math.pow(newGrid1[i][j][1], 2) + parseFloat(inputval[i][3]) * newGrid1[i][j][1] + parseFloat(inputval[i][4])).toFixed(4)]);\n          j = newGrid1[i][j][2];\n          i--;\n        }\n      }\n      if (i === 0 && j !== 0) {\n        arrayans.push([i + 1, newGrid1[i][j][1], (1 / 2 * parseFloat(inputval[i][2]) * Math.pow(newGrid1[i][j][1], 2) + parseFloat(inputval[i][3]) * newGrid1[i][j][1] + parseFloat(inputval[i][4])).toFixed(4)]);\n      }\n      arrayans.sort((a, b) => a[0] - b[0]);\n      setMainans(arrayans);\n      setAnswer(ans1);\n    }\n  };\n  useEffect(() => {\n    setIstrue(false);\n  }, [mainans]);\n  const handleChange = event => {\n    const selectedValue = parseInt(event.target.value);\n    setTotal(selectedValue);\n    if (selectedValue < total) {\n      setInputval(inputval.slice(0, selectedValue));\n    } else {\n      setInputval(inputval.concat(Array(selectedValue - total).fill([0, 0, 0, 0, 0])));\n    }\n  };\n  const updateCellValue = (rowIndex, columnIndex, newValue) => {\n    setInputval(prevGrid => {\n      const newGrid = [...prevGrid];\n      newGrid[rowIndex] = [...prevGrid[rowIndex]];\n      newGrid[rowIndex][columnIndex] = newValue;\n      return newGrid;\n    });\n  };\n  useEffect(() => {\n    setIstrue(true);\n  }, [inputval, load]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"select\", {\n      className: \"custom-select\",\n      onChange: handleChange,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        disabled: true,\n        selected: true,\n        value: \" \",\n        children: \"Select Total Generators\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"1\",\n        children: \"1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"2\",\n        children: \"2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"3\",\n        children: \"3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"4\",\n        children: \"4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"5\",\n        children: \"5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"6\",\n        children: \"6\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"7\",\n        children: \"7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"8\",\n        children: \"8\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 13\n    }, this), total !== 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        'marginTop': '50px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"table-container\",\n        children: /*#__PURE__*/_jsxDEV(Table, {\n          border: \"1\",\n          width: \"1000\",\n          align: \"center\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              id: \"definition\",\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: \"Generator\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 224,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: \"Minimum Capacity (MW)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 225,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: \"Maximum Capacity (MW)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 226,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: \"a\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 227,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: \"b\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 228,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: \"d\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 229,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 223,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: inputval.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: rowIndex + 1\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 236,\n                columnNumber: 37\n              }, this), row.map((cell, columnIndex) => columnIndex < 2 ? /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"number\",\n                  value: cell,\n                  onChange: e => {\n                    const newValue = parseInt(e.target.value, 10);\n                    updateCellValue(rowIndex, columnIndex, newValue);\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 242,\n                  columnNumber: 49\n                }, this)\n              }, columnIndex, false, {\n                fileName: _jsxFileName,\n                lineNumber: 241,\n                columnNumber: 45\n              }, this) : /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"number\",\n                  step: \"any\",\n                  defaultValue: \"0\",\n                  onChange: e => {\n                    let newValue = parseFloat(e.target.value);\n                    newValue = newValue.toFixed(6);\n                    updateCellValue(rowIndex, columnIndex, newValue);\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 251,\n                  columnNumber: 49\n                }, this)\n              }, columnIndex, false, {\n                fileName: _jsxFileName,\n                lineNumber: 250,\n                columnNumber: 45\n              }, this))]\n            }, rowIndex, true, {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            'display': 'inline-block'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              'marginRight': '50px',\n              \"backgroundColor\": \"White\",\n              \"padding\": \"10px\",\n              \"border-radius\": \"10px\"\n            },\n            children: \"Enter the Load required\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"custom-input\",\n          type: \"text\",\n          defaultValue: parseInt(0),\n          onChange: e => {\n            setLoad(e.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 21\n        }, this), istrue === true ? /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"table-button\",\n          onClick: solver,\n          children: \"Solve for generators to use\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"table-container\",\n            children: /*#__PURE__*/_jsxDEV(Table, {\n              border: \"1\",\n              width: \"1000\",\n              align: \"center\",\n              children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                  id: \"definition\",\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: \"Generator\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 281,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: \"Output\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 282,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: \"Cost\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 283,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 280,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 279,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                children: mainans.map((row, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: row.map((cell, columnIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: cell\n                  }, columnIndex, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 290,\n                    columnNumber: 49\n                  }, this))\n                }, index, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 288,\n                  columnNumber: 41\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 286,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 278,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: answer !== Number.MAX_SAFE_INTEGER ? /*#__PURE__*/_jsxDEV(\"h1\", {\n              style: {\n                \"backgroundColor\": \"White\"\n              },\n              children: [\"Overall Cost = \", answer]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 303,\n              columnNumber: 41\n            }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n              style: {\n                \"backgroundColor\": \"White\"\n              },\n              children: \"Overall Cost = 0\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 304,\n              columnNumber: 41\n            }, this)\n          }, void 0, false)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        style: {\n          \"backgroundColor\": \"white\"\n        },\n        children: \"Please select some value\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 202,\n    columnNumber: 9\n  }, this);\n};\n_s(UCDP, \"7eEiHuE6HQ2mirdVy6Uaw1xdS5c=\");\n_c = UCDP;\nexport default UCDP;\nvar _c;\n$RefreshReg$(_c, \"UCDP\");","map":{"version":3,"names":["React","useEffect","useState","Table","jsxDEV","_jsxDEV","Fragment","_Fragment","UCDP","_s","total","setTotal","inputval","setInputval","load","setLoad","mainans","setMainans","istrue","setIstrue","answer","setAnswer","solver","rows","col","parseInt","newGrid","Array","i","fill","newGrid1","newGrid2","j","k","totalsum","alert","parseFloat","Math","pow","numrows","Number","MAX_SAFE_INTEGER","length","flag","ans1","arraytesting","map","row","value","curr","MAX_VALUE","index1","index2","min","toFixed","prevcols","currcols","arrayans","push","sort","a","b","answer1","v1","handleChange","event","selectedValue","target","slice","concat","updateCellValue","rowIndex","columnIndex","newValue","prevGrid","children","className","onChange","disabled","selected","fileName","_jsxFileName","lineNumber","columnNumber","style","border","width","align","id","cell","type","e","step","defaultValue","onClick","index","_c","$RefreshReg$"],"sources":["D:/Home/Minor-Project-main/Minor-Project-main/front-end/src/Components/UCDP.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Table } from 'react-bootstrap';\nimport './tableDesign.css';\nimport './btn&select.css';\nconst UCDP = () => {\n    const [total, setTotal] = useState(0);\n    const [inputval, setInputval] = useState([]);\n    const [load, setLoad] = useState(0);\n    const [mainans, setMainans] = useState([]);\n    const [istrue, setIstrue] = useState(true);\n    const [answer, setAnswer] = useState(0);\n    const solver = async () => {\n        const rows = total;\n        const col = parseInt(load) + 1;\n        const newGrid = new Array(rows);\n        for (let i = 0; i < rows; i++) {\n            newGrid[i] = Array(inputval[i][1]).fill(0);\n        }\n        const newGrid1 = new Array(rows);\n        const newGrid2 = new Array(rows);\n        for (let i = 0; i < rows; i++) {\n            newGrid1[i] = new Array(inputval[i][1]);\n            newGrid2[i] = new Array(inputval[i][1]);\n            for (let j = 0; j <= inputval[i][1]; j++) {\n                newGrid1[i][j] = new Array(3);\n                newGrid2[i][j] = new Array(3);\n                for (let k = 0; k < 3; k++) {\n                    newGrid1[i][j][k] = 0;\n                    newGrid2[i][j][k] = 0;\n                }\n            }\n        }\n        var totalsum =0 ;\n        for(let  i=0 ;i<rows;i++)\n        {\n            totalsum+=inputval[i][1];\n        }\n        if(totalsum<parseInt(load))\n        {\n            alert(\"Please enter load within limit of combination of generator output\");\n            return ;\n        }\n        for (let i = 0; i < rows; i++) {\n            for (let j = 1; j <= inputval[i][1]; j++) {\n                newGrid[i][j] = (1 / 2) * parseFloat(inputval[i][2]) * Math.pow(j, 2) + parseFloat(inputval[i][3]) * (j) + parseFloat(inputval[i][4]);\n            }\n        }\n        let numrows = inputval[0][1] + 1;\n        for (let i = 1; i < rows; i++) {\n            numrows += inputval[i][1];\n            newGrid2[i] = Array(numrows).fill([(Number.MAX_SAFE_INTEGER) / 10000000, 0, 0]);\n        }\n        for (let i = 0; i < newGrid[0].length; i++) {\n            newGrid1[0][i][0] = newGrid[0][i];\n            newGrid1[0][i][1] = i;\n            newGrid1[0][i][2] = -1;\n            newGrid2[0][i][0] = newGrid[0][i];\n            newGrid2[0][i][1] = i;\n            newGrid2[0][i][2] = -1;\n        }\n\n        let flag = true;\n        for (let i = 0; i < rows; i++) {\n            if (inputval[i][1] < load) {\n                flag = false;\n            }\n        }\n        let ans1 = Number.MAX_SAFE_INTEGER;\n        const arraytesting = newGrid2.map(row =>\n            row.map(col =>\n                col.map(value =>\n                    value\n                )\n            )\n        );\n        if (flag) {\n            for (let i = 1; i < rows; i++) {\n                for (let j = 0; j <= inputval[i][1]; j++) {\n                    if (j === 0) {\n                        newGrid1[i][0][0] = newGrid[i][0];\n                        continue;\n                    }\n                    let curr = Number.MAX_VALUE;\n                    let index1 = 0;\n                    let index2 = 0;\n                    for (let k = 0; k <= j; k++) {\n\n                        if (curr > newGrid1[i - 1][j - k][0] + newGrid[i][k]) {\n                            index1 = k;\n                            index2 = j - k;\n                        }\n                        curr = Math.min(curr, newGrid1[i - 1][j - k][0] + newGrid[i][k]);\n                        if (j === col - 1) {\n                            ans1 = Math.min(ans1, curr).toFixed(4);\n                        }\n                    }\n                    newGrid1[i][j][0] = curr;\n                    newGrid1[i][j][1] = index1;\n                    newGrid1[i][j][2] = index2;\n                }\n            }\n        }\n        else {\n\n            let prevcols = newGrid2[0].length;\n            for (let i = 1; i < rows; i++) {\n                let currcols = newGrid[i].length - 1;\n\n                for (let j = 0; j <= currcols; j++) {\n                    for (let k = 0; k < prevcols; k++) {\n                        if (arraytesting[i][j + k][0] > newGrid[i][j] + arraytesting[i - 1][k][0]) {\n                            arraytesting[i][j + k][0] = newGrid[i][j] + arraytesting[i - 1][k][0];\n                            arraytesting[i][j + k][1] = j;\n                            arraytesting[i][j + k][2] = k;\n                        }\n                    }\n                }\n                prevcols = newGrid2[i].length;\n            }\n        }\n            if (!flag) {\n                let arrayans = [];\n                let j = parseInt(load);\n                let i = rows - 1;\n                while (i > 0 && j > 0) {\n                    if (arraytesting[i][j][1] === 0) {\n                        i--;\n                    }\n                    else {\n\n                        arrayans.push([i + 1, arraytesting[i][j][1], ((1 / 2) * parseFloat(inputval[i][2]) * Math.pow(arraytesting[i][j][1], 2) + parseFloat(inputval[i][3]) * (arraytesting[i][j][1]) + parseFloat(inputval[i][4])).toFixed(4)]);\n                        j = arraytesting[i][j][2];\n                        i--;\n                    }\n                }\n                if (i === 0 && j !== 0) {\n                    arrayans.push([i + 1, arraytesting[i][j][1], ((1 / 2) * parseFloat(inputval[i][2]) * Math.pow(arraytesting[i][j][1], 2) + parseFloat(inputval[i][3]) * (arraytesting[i][j][1]) + parseFloat(inputval[i][4])).toFixed(4)]);\n                }\n                arrayans.sort((a, b) => a[0] - b[0]);\n                setMainans(arrayans);\n                var answer1 = 0;\n                for(let i = 0;i<arrayans.length;i++)\n                {\n                    var v1 = parseFloat(arrayans[i][2]); \n\n                    answer1 += v1;\n\n                }\n                setAnswer(answer1.toFixed(4));\n            }\n            else {\n                let arrayans = [];\n                let j = parseInt(load);\n                let i = rows - 1;\n                while (i > 0 && j > 0) {\n                    if (newGrid1[i][j][1] === 0) {\n                        i--;\n                    }\n                    else {\n\n                        arrayans.push([i + 1, newGrid1[i][j][1], ((1 / 2) * parseFloat(inputval[i][2]) * Math.pow(newGrid1[i][j][1], 2) + parseFloat(inputval[i][3]) * (newGrid1[i][j][1]) + parseFloat(inputval[i][4])).toFixed(4)]);\n                        j = newGrid1[i][j][2];\n                        i--;\n                    }\n                }\n                if (i === 0 && j !== 0) {\n                    arrayans.push([i + 1, newGrid1[i][j][1], ((1 / 2) * parseFloat(inputval[i][2]) * Math.pow(newGrid1[i][j][1], 2) + parseFloat(inputval[i][3]) * (newGrid1[i][j][1]) + parseFloat(inputval[i][4])).toFixed(4)]);\n                }\n                arrayans.sort((a, b) => a[0] - b[0]);\n                setMainans(arrayans);\n                setAnswer(ans1);\n            }\n        };\n    \n\n    useEffect(() => {\n        setIstrue(false);\n    }, [mainans]);\n\n    const handleChange = (event) => {\n        const selectedValue = parseInt(event.target.value);\n        setTotal(selectedValue);\n\n        if (selectedValue < total) {\n            setInputval(inputval.slice(0, selectedValue));\n        } else {\n            setInputval(inputval.concat(Array(selectedValue - total).fill([0, 0, 0, 0, 0])));\n        }\n    };\n    const updateCellValue = (rowIndex, columnIndex, newValue) => {\n        setInputval((prevGrid) => {\n            const newGrid = [...prevGrid];\n            newGrid[rowIndex] = [...prevGrid[rowIndex]];\n            newGrid[rowIndex][columnIndex] = newValue;\n            return newGrid;\n        });\n    };\n    useEffect(() => {\n        setIstrue(true);\n    }, [inputval, load]);\n    return (\n        <div >\n\n            {/* <span style={{\"backgroundColor\":\"white\"}}> */}\n            <select className=\"custom-select\" onChange={handleChange}>\n                <option disabled selected value=\" \">Select Total Generators</option>\n                <option value=\"1\">1</option>\n                <option value=\"2\">2</option>\n                <option value=\"3\">3</option>\n                <option value=\"4\">4</option>\n                <option value=\"5\">5</option>\n                <option value=\"6\">6</option>\n                <option value=\"7\">7</option>\n                <option value=\"8\">8</option>\n\n            </select>\n            {/* </span> */}\n            {total !== 0 ?\n                <div style={{ 'marginTop': '50px' }}>\n                    <div className=\"table-container\">\n                    <Table border='1' width='1000' align='center'>\n                        <thead>\n                            <tr id=\"definition\">\n                                <td>Generator</td>\n                                <td>Minimum Capacity (MW)</td>\n                                <td>Maximum Capacity (MW)</td>\n                                <td>a</td>\n                                <td>b</td>\n                                <td>d</td>\n                            </tr>\n\n                        </thead>\n                        <tbody>\n                            {inputval.map((row, rowIndex) => (\n                                <tr key={rowIndex}>\n                                    <td>\n                                        {rowIndex + 1}\n                                    </td>\n                                    {row.map((cell, columnIndex) => (\n                                        columnIndex < 2 ?\n                                            <td key={columnIndex}>\n                                                <input\n                                                    type=\"number\"\n                                                    value={cell}\n                                                    onChange={(e) => {\n                                                        const newValue = parseInt(e.target.value, 10);\n                                                        updateCellValue(rowIndex, columnIndex, newValue);\n                                                    }} />\n                                            </td> :\n                                            <td key={columnIndex}>\n                                                <input\n                                                    type=\"number\"\n                                                    step=\"any\"\n                                                    defaultValue=\"0\"\n                                                    onChange={(e) => {\n                                                        let newValue = parseFloat(e.target.value);\n                                                        newValue = newValue.toFixed(6);\n                                                        updateCellValue(rowIndex, columnIndex, newValue);\n                                                    }} />\n                                            </td>\n                                    ))}\n                                </tr>\n                            ))}\n                        </tbody>\n                    </Table>\n                    </div>\n                    <div className=\"button-container\">\n                    <span style={{ 'display': 'inline-block' }}>\n                        <p style={{ 'marginRight': '50px' ,\"backgroundColor\":\"White\",\"padding\":\"10px\",\"border-radius\":\"10px\"}}>Enter the Load required</p>\n                    </span>\n                    <input className='custom-input' type=\"text\" defaultValue={parseInt(0)} onChange={(e) => { setLoad(e.target.value); }} />\n                    <br />\n                    {istrue === true ?\n\n                        <button className='table-button' onClick={solver}>Solve for generators to use</button> :\n                        <>\n                            <div className=\"table-container\">\n                            <Table border='1' width='1000' align='center'>\n                                <thead>\n                                    <tr id=\"definition\">\n                                        <td>Generator</td>\n                                        <td>Output</td>\n                                        <td>Cost</td>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {mainans.map((row, index) => (\n                                        <tr key={index}>\n                                            {row.map((cell, columnIndex) => (\n                                                <td key={columnIndex}>\n                                                    {cell}\n                                                </td>\n                                            ))}\n                                        </tr>\n                                    ))}\n                                </tbody>\n                            </Table>\n                            </div>\n                            {\n                                <>\n                                {\n                                    answer !== Number.MAX_SAFE_INTEGER ?\n                                        <h1 style={{\"backgroundColor\":\"White\"}}>Overall Cost = {answer}</h1> :\n                                        <h1 style={{\"backgroundColor\":\"White\"}}>Overall Cost = 0</h1>\n                                }\n                                </>\n                            }   \n\n                        </>}\n                        </div>\n\n                </div>\n                : <div>\n                    <h1 style={{\"backgroundColor\":\"white\"}}>Please select some value</h1>\n                </div>}\n        </div>\n\n    );\n\n};\n\nexport default UCDP;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}